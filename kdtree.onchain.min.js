const KdTree={build(ps,k=ps[0]?.length,d=0,l=ps.length){return!l?null:this.node(this.sort(ps,d%k),~~(l/2),k,d)},node(ps,m,k,d){return(new Map).set('p',ps[m]).set('a',d%k).set('l',!m?null:this.build(ps.slice(0,m),k,d+1)).set('r',!m?null:this.build(ps.slice(m),k,d+1))},sort(ps,a){return ps.slice().sort((m,n)=>m[a]<n[a]?-1:m[a]>n[a]?1:0)},d(a,b){return a.reduce((s,v,i)=>s+(v-b[i])**2,0)},near(c,q,n=1,ps=[]){if(!c){return ps}this.reg(ps,c.get('p'),q,n);return this.s(ps,q,n,c.get('p'),c.get('a'),this.nf(q,...c.values()))},s(ps,q,n,p,a,nf){return this.sf(this.near(nf[0],q,n,ps.slice()),q,n,this.d([p[a]],[q[a]]),nf[1])},sf(ps,q,n,d,f){return ps.find(p=>this.d(p,q)>=d)?this.near(f,q,n,ps.slice()):ps},reg(ps,p,q,n){ps.length<n?this.push(ps,p):this.put(ps,p,q,this.d(p,q))},push(ps,p){if(ps.map(x=>String(x)).indexOf(String(p))==-1){ps.push(p)}},put(ps,p,q,d,i){if((i=ps.findIndex(p=>d<this.d(p,q)))>-1){ps[i]=p}},nf(q,p,a,l,r){return q[a]<=p[a]?[l,r]:[r,l]}};